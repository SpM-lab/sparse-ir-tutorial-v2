Traceback (most recent call last):
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/hostedtoolcache/Python/3.13.9/x64/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
### Initialize calculation
# Set mesh
IR_basis_set = sparse_ir.FiniteTempBasisSet(beta, wmax, eps=IR_tol)
mesh = Mesh(IR_basis_set)

# Calculate non-interacting Green function
rho = lambda omega : 2*np.sqrt(D**2 - omega.clip(-D,D)**2)/(np.pi*D**2)
rho_l = IR_basis_set.basis_f.v.overlap(rho, -wmax, wmax)
g0_l  = -IR_basis_set.basis_f.s * rho_l
g0_loc = IR_basis_set.smpl_wn_f.evaluate(g0_l)

# Initiate DMFT loop
solver = DMFT_loop(mesh, g0_loc, U, D, sfc_tol=sfc_tol, maxiter=maxiter, mix=mix, verbose=True)

# perform DMFT calculations
solver.solve()
------------------


[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 8[39m
[32m      6[39m [38;5;66;03m# Calculate non-interacting Green function[39;00m
[32m      7[39m rho = [38;5;28;01mlambda[39;00m omega : [32m2[39m*np.sqrt(D**[32m2[39m - omega.clip(-D,D)**[32m2[39m)/(np.pi*D**[32m2[39m)
[32m----> [39m[32m8[39m rho_l = [43mIR_basis_set[49m[43m.[49m[43mbasis_f[49m[43m.[49m[43mv[49m[43m.[49m[43moverlap[49m[43m([49m[43mrho[49m[43m,[49m[43m [49m[43m-[49m[43mwmax[49m[43m,[49m[43m [49m[43mwmax[49m[43m)[49m
[32m      9[39m g0_l  = -IR_basis_set.basis_f.s * rho_l
[32m     10[39m g0_loc = IR_basis_set.smpl_wn_f.evaluate(g0_l)

[36mFile [39m[32m~/work/sparse-ir-tutorial-v2/sparse-ir-tutorial-v2/.venv/lib/python3.13/site-packages/sparse_ir/poly.py:372[39m, in [36mPiecewiseLegendrePolyVector.overlap[39m[34m(self, f, xmin, xmax, rtol, return_error, points)[39m
[32m    369[39m     [38;5;28;01mif[39;00m xmax > [38;5;28mself[39m._xmax:
[32m    370[39m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33mf[39m[33m"[39m[33mxmax ([39m[38;5;132;01m{[39;00mxmax[38;5;132;01m}[39;00m[33m) must be less than or equal to the upper bound of the polynomial domain ([39m[38;5;132;01m{[39;00m[38;5;28mself[39m._xmax[38;5;132;01m}[39;00m[33m)[39m[33m"[39m)
[32m--> [39m[32m372[39m f_res = [43mf[49m[43m([49m[32;43m0.5[39;49m[43m*[49m[43mxmin[49m[43m [49m[43m+[49m[43m [49m[32;43m0.5[39;49m[43m*[49m[43mxmax[49m[43m)[49m
[32m    374[39m f_ = f
[32m    375[39m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(f_res, [33m'[39m[33mshape[39m[33m'[39m):

[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 7[39m, in [36m<lambda>[39m[34m(omega)[39m
[32m      4[39m mesh = Mesh(IR_basis_set)
[32m      6[39m [38;5;66;03m# Calculate non-interacting Green function[39;00m
[32m----> [39m[32m7[39m rho = [38;5;28;01mlambda[39;00m omega : [32m2[39m*np.sqrt(D**[32m2[39m - [43momega[49m[43m.[49m[43mclip[49m(-D,D)**[32m2[39m)/(np.pi*D**[32m2[39m)
[32m      8[39m rho_l = IR_basis_set.basis_f.v.overlap(rho, -wmax, wmax)
[32m      9[39m g0_l  = -IR_basis_set.basis_f.s * rho_l

[31mAttributeError[39m: 'float' object has no attribute 'clip'

